{"ast":null,"code":"var sortTable = function sortTable() {\n  var score = document.querySelector('.score');\n\n  if (score) {\n    score.addEventListener('click', function (event) {\n      var table,\n          rows,\n          switching,\n          i,\n          x,\n          y,\n          shouldSwitch,\n          dir,\n          switchcount = 0;\n      table = document.getElementById(\"myTable2\");\n      switching = true; // Set the sorting direction to ascending:\n\n      dir = \"asc\";\n      /* Make a loop that will continue until\n      no switching has been done: */\n\n      while (switching) {\n        // Start by saying: no switching is done:\n        switching = false;\n        rows = table.rows;\n        /* Loop through all table rows (except the\n        first, which contains table headers): */\n\n        for (i = 1; i < rows.length - 1; i++) {\n          // Start by saying there should be no switching:\n          shouldSwitch = false;\n          /* Get the two elements you want to compare,\n          one from current row and one from the next: */\n\n          x = rows[i].getElementsByTagName(\"TD\")[1];\n          y = rows[i + 1].getElementsByTagName(\"TD\")[1];\n          /* Check if the two rows should switch place,\n          based on the direction, asc or desc: */\n\n          console.log(Number(x.innerHTML.charAt(1)));\n\n          if (dir == \"asc\") {\n            if (Number(x.innerHTML.charAt(0)) > Number(y.innerHTML.charAt(0))) {\n              // If so, mark as a switch and break the loop:\n              shouldSwitch = true;\n              break;\n            }\n          } else if (dir == \"desc\") {\n            if (Number(x.innerHTML.charAt(0)) < Number(y.innerHTML.charAt(0))) {\n              // If so, mark as a switch and break the loop:\n              shouldSwitch = true;\n              break;\n            }\n          }\n        }\n\n        if (shouldSwitch) {\n          /* If a switch has been marked, make the switch\n          and mark that a switch has been done: */\n          rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\n          switching = true; // Each time a switch is done, increase this count by 1:\n\n          switchcount++;\n        } else {\n          /* If no switching has been done AND the direction is \"asc\",\n          set the direction to \"desc\" and run the while loop again. */\n          if (switchcount == 0 && dir == \"asc\") {\n            dir = \"desc\";\n            switching = true;\n          }\n        }\n      }\n    });\n  }\n\n  ;\n};\n\nexport { sortTable };","map":{"version":3,"sources":["/Users/mathilderobert/code/Castrax/antho-birthday/app/javascript/components/sort-table.js"],"names":["sortTable","score","document","querySelector","addEventListener","event","table","rows","switching","i","x","y","shouldSwitch","dir","switchcount","getElementById","length","getElementsByTagName","console","log","Number","innerHTML","charAt","parentNode","insertBefore"],"mappings":"AAAA,IAAMA,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,MAAMC,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAd;;AACA,MAAIF,KAAJ,EAAW;AACTA,IAAAA,KAAK,CAACG,gBAAN,CAAuB,OAAvB,EAAgC,UAACC,KAAD,EAAW;AACvC,UAAIC,KAAJ;AAAA,UAAWC,IAAX;AAAA,UAAiBC,SAAjB;AAAA,UAA4BC,CAA5B;AAAA,UAA+BC,CAA/B;AAAA,UAAkCC,CAAlC;AAAA,UAAqCC,YAArC;AAAA,UAAmDC,GAAnD;AAAA,UAAwDC,WAAW,GAAG,CAAtE;AACAR,MAAAA,KAAK,GAAGJ,QAAQ,CAACa,cAAT,CAAwB,UAAxB,CAAR;AACAP,MAAAA,SAAS,GAAG,IAAZ,CAHuC,CAIvC;;AACAK,MAAAA,GAAG,GAAG,KAAN;AACA;;;AAEA,aAAOL,SAAP,EAAkB;AAChB;AACAA,QAAAA,SAAS,GAAG,KAAZ;AACAD,QAAAA,IAAI,GAAGD,KAAK,CAACC,IAAb;AACA;;;AAEA,aAAKE,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAIF,IAAI,CAACS,MAAL,GAAc,CAA/B,EAAmCP,CAAC,EAApC,EAAwC;AACtC;AACAG,UAAAA,YAAY,GAAG,KAAf;AACA;;;AAEAF,UAAAA,CAAC,GAAGH,IAAI,CAACE,CAAD,CAAJ,CAAQQ,oBAAR,CAA6B,IAA7B,EAAmC,CAAnC,CAAJ;AACAN,UAAAA,CAAC,GAAGJ,IAAI,CAACE,CAAC,GAAG,CAAL,CAAJ,CAAYQ,oBAAZ,CAAiC,IAAjC,EAAuC,CAAvC,CAAJ;AACA;;;AAEAC,UAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACV,CAAC,CAACW,SAAF,CAAYC,MAAZ,CAAmB,CAAnB,CAAD,CAAlB;;AACA,cAAIT,GAAG,IAAI,KAAX,EAAkB;AAChB,gBAAIO,MAAM,CAACV,CAAC,CAACW,SAAF,CAAYC,MAAZ,CAAmB,CAAnB,CAAD,CAAN,GAAgCF,MAAM,CAACT,CAAC,CAACU,SAAF,CAAYC,MAAZ,CAAmB,CAAnB,CAAD,CAA1C,EAAmE;AACjE;AACAV,cAAAA,YAAY,GAAG,IAAf;AACA;AACD;AACF,WAND,MAMO,IAAIC,GAAG,IAAI,MAAX,EAAmB;AACxB,gBAAIO,MAAM,CAACV,CAAC,CAACW,SAAF,CAAYC,MAAZ,CAAmB,CAAnB,CAAD,CAAN,GAAgCF,MAAM,CAACT,CAAC,CAACU,SAAF,CAAYC,MAAZ,CAAmB,CAAnB,CAAD,CAA1C,EAAmE;AACjE;AACAV,cAAAA,YAAY,GAAG,IAAf;AACA;AACD;AACF;AACF;;AACD,YAAIA,YAAJ,EAAkB;AAChB;;AAEAL,UAAAA,IAAI,CAACE,CAAD,CAAJ,CAAQc,UAAR,CAAmBC,YAAnB,CAAgCjB,IAAI,CAACE,CAAC,GAAG,CAAL,CAApC,EAA6CF,IAAI,CAACE,CAAD,CAAjD;AACAD,UAAAA,SAAS,GAAG,IAAZ,CAJgB,CAKhB;;AACAM,UAAAA,WAAW;AACZ,SAPD,MAOO;AACL;;AAEA,cAAIA,WAAW,IAAI,CAAf,IAAoBD,GAAG,IAAI,KAA/B,EAAsC;AACpCA,YAAAA,GAAG,GAAG,MAAN;AACAL,YAAAA,SAAS,GAAG,IAAZ;AACD;AACF;AACF;AACJ,KAtDD;AAuDD;;AAAA;AACF,CA3DD;;AA8DA,SAASR,SAAT","sourcesContent":["const sortTable = () => {\n  const score = document.querySelector('.score');\n  if (score) {\n    score.addEventListener('click', (event) => {\n        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;\n        table = document.getElementById(\"myTable2\");\n        switching = true;\n        // Set the sorting direction to ascending:\n        dir = \"asc\";\n        /* Make a loop that will continue until\n        no switching has been done: */\n        while (switching) {\n          // Start by saying: no switching is done:\n          switching = false;\n          rows = table.rows;\n          /* Loop through all table rows (except the\n          first, which contains table headers): */\n          for (i = 1; i < (rows.length - 1); i++) {\n            // Start by saying there should be no switching:\n            shouldSwitch = false;\n            /* Get the two elements you want to compare,\n            one from current row and one from the next: */\n            x = rows[i].getElementsByTagName(\"TD\")[1];\n            y = rows[i + 1].getElementsByTagName(\"TD\")[1];\n            /* Check if the two rows should switch place,\n            based on the direction, asc or desc: */\n            console.log(Number(x.innerHTML.charAt(1)));\n            if (dir == \"asc\") {\n              if (Number(x.innerHTML.charAt(0)) > Number(y.innerHTML.charAt(0))) {\n                // If so, mark as a switch and break the loop:\n                shouldSwitch = true;\n                break;\n              }\n            } else if (dir == \"desc\") {\n              if (Number(x.innerHTML.charAt(0)) < Number(y.innerHTML.charAt(0))) {\n                // If so, mark as a switch and break the loop:\n                shouldSwitch = true;\n                break;\n              }\n            }\n          }\n          if (shouldSwitch) {\n            /* If a switch has been marked, make the switch\n            and mark that a switch has been done: */\n            rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\n            switching = true;\n            // Each time a switch is done, increase this count by 1:\n            switchcount ++;\n          } else {\n            /* If no switching has been done AND the direction is \"asc\",\n            set the direction to \"desc\" and run the while loop again. */\n            if (switchcount == 0 && dir == \"asc\") {\n              dir = \"desc\";\n              switching = true;\n            }\n          }\n        }\n    });\n  };\n};\n\n\nexport { sortTable };\n"]},"metadata":{},"sourceType":"module"}